if (log_transform) {
df[[response_var]] <- log10(df[[response_var]])
}
df <- df %>% filter(!is.na(.data[[response_var]]))
formula <- as.formula(paste(response_var, "~ deposition + (1 | stream)"))
model <- lmer(formula, data = df)
# Model diagnostics
message("\nModel diagnostics for: ", response_var)
print(performance::check_model(model))  # <- Plots in Viewer
# Extract fixed effects
fixed_effects <- summary(model)$coefficients
fixed_effects_df <- as.data.frame(fixed_effects[, c("Estimate", "Std. Error", "df", "t value", "Pr(>|t|)")])
fixed_effects_df$Effect_Type <- ifelse(grepl("(Intercept)", rownames(fixed_effects_df)), "Intercept", "Effect Size")
fixed_effects_df$Variable <- response_var
fixed_effects_df <- fixed_effects_df[, c("Variable", "Effect_Type", "Estimate", "Std. Error", "df", "t value", "Pr(>|t|)")]
colnames(fixed_effects_df) <- c("Variable", "Effect_Type", "Estimate", "Std. Error", "df", "t value", "P")
return(fixed_effects_df)
}
# For asinh-transformed response (e.g., NEP)
run_lmer_model_asinh <- function(response_var, df) {
df[[response_var]] <- asinh(df[[response_var]])
df <- df %>% filter(!is.na(.data[[response_var]]))
formula <- as.formula(paste(response_var, "~ deposition + (1 | stream)"))
model <- lmer(formula, data = df)
# Model diagnostics
message("\nModel diagnostics for: ", response_var)
print(performance::check_model(model))  # <- Plots in Viewer
# Extract fixed effects
fixed_effects <- summary(model)$coefficients
fixed_effects_df <- as.data.frame(fixed_effects[, c("Estimate", "Std. Error", "df", "t value", "Pr(>|t|)")])
fixed_effects_df$Effect_Type <- ifelse(grepl("(Intercept)", rownames(fixed_effects_df)), "Intercept", "Effect Size")
fixed_effects_df$Variable <- response_var
fixed_effects_df <- fixed_effects_df[, c("Variable", "Effect_Type", "Estimate", "Std. Error", "df", "t value", "Pr(>|t|)")]
colnames(fixed_effects_df) <- c("Variable", "Effect_Type", "Estimate", "Std. Error", "df", "t value", "P")
return(fixed_effects_df)
}
# GPP: log10 transform
fixed_effects_GPP <- run_lmer_model("gpp_g_m2_d", df_filtered, log_transform = TRUE)
fixed_effects_ER <- run_lmer_model("er_g_m2_d", df_filtered, log_transform = TRUE)
fixed_effects_NEP <- run_lmer_model_asinh("nep_g_m2_d", df_filtered)
library(dplyr)
library(ggplot2)
library(lmerTest)
library(performance)
library(openxlsx)
# ---- Load and Clean Data ----
df <- read.csv("./data/metabolism_data.csv")
# Remove RT stream (rows 23:25) due to biased estimates
df_filtered <- df[-c(23:25), ]
# For log10-transformed response (e.g., GPP, ER, P:R)
run_lmer_model <- function(response_var, df, log_transform = FALSE) {
if (log_transform) {
df[[response_var]] <- log10(df[[response_var]])
}
df <- df %>% filter(!is.na(.data[[response_var]]))
formula <- as.formula(paste(response_var, "~ deposition + (1 | stream)"))
model <- lmer(formula, data = df)
# Model diagnostics
message("\nModel diagnostics for: ", response_var)
print(performance::check_model(model))  # <- Plots in Viewer
# Extract fixed effects
fixed_effects <- summary(model)$coefficients
fixed_effects_df <- as.data.frame(fixed_effects[, c("Estimate", "Std. Error", "df", "t value", "Pr(>|t|)")])
fixed_effects_df$Effect_Type <- ifelse(grepl("(Intercept)", rownames(fixed_effects_df)), "Intercept", "Effect Size")
fixed_effects_df$Variable <- response_var
fixed_effects_df <- fixed_effects_df[, c("Variable", "Effect_Type", "Estimate", "Std. Error", "df", "t value", "Pr(>|t|)")]
colnames(fixed_effects_df) <- c("Variable", "Effect_Type", "Estimate", "Std. Error", "df", "t value", "P")
return(fixed_effects_df)
}
# For asinh-transformed response (e.g., NEP)
run_lmer_model_asinh <- function(response_var, df) {
df[[response_var]] <- asinh(df[[response_var]])
df <- df %>% filter(!is.na(.data[[response_var]]))
formula <- as.formula(paste(response_var, "~ deposition + (1 | stream)"))
model <- lmer(formula, data = df)
# Model diagnostics
message("\nModel diagnostics for: ", response_var)
print(performance::check_model(model))  # <- Plots in Viewer
# Extract fixed effects
fixed_effects <- summary(model)$coefficients
fixed_effects_df <- as.data.frame(fixed_effects[, c("Estimate", "Std. Error", "df", "t value", "Pr(>|t|)")])
fixed_effects_df$Effect_Type <- ifelse(grepl("(Intercept)", rownames(fixed_effects_df)), "Intercept", "Effect Size")
fixed_effects_df$Variable <- response_var
fixed_effects_df <- fixed_effects_df[, c("Variable", "Effect_Type", "Estimate", "Std. Error", "df", "t value", "Pr(>|t|)")]
colnames(fixed_effects_df) <- c("Variable", "Effect_Type", "Estimate", "Std. Error", "df", "t value", "P")
return(fixed_effects_df)
}
# GPP: log10 transform
fixed_effects_GPP <- run_lmer_model("gpp_g_m2_d", df_filtered, log_transform = TRUE)
# ---- Load and Clean Data ----
df <- read.csv("./data/metabolism_data.csv")
# Remove RT stream (rows 23:25) due to biased estimates
df_filtered <- df[-c(23:25), ]
# For log10-transformed response (e.g., GPP, ER, P:R)
run_lmer_model <- function(response_var, df, log_transform = FALSE) {
if (log_transform) {
df[[response_var]] <- log10(df[[response_var]])
}
df <- df %>% filter(!is.na(.data[[response_var]]))
formula <- as.formula(paste(response_var, "~ deposition + (1 | stream)"))
model <- lmer(formula, data = df)
# Model diagnostics
message("\nModel diagnostics for: ", response_var)
print(performance::check_model(model))  # <- Plots in Viewer
# Extract fixed effects
fixed_effects <- summary(model)$coefficients
fixed_effects_df <- as.data.frame(fixed_effects[, c("Estimate", "Std. Error", "df", "t value", "Pr(>|t|)")])
fixed_effects_df$Effect_Type <- ifelse(grepl("(Intercept)", rownames(fixed_effects_df)), "Intercept", "Effect Size")
fixed_effects_df$Variable <- response_var
fixed_effects_df <- fixed_effects_df[, c("Variable", "Effect_Type", "Estimate", "Std. Error", "df", "t value", "Pr(>|t|)")]
colnames(fixed_effects_df) <- c("Variable", "Effect_Type", "Estimate", "Std. Error", "df", "t value", "P")
return(fixed_effects_df)
}
# For asinh-transformed response (e.g., NEP)
run_lmer_model_asinh <- function(response_var, df) {
df[[response_var]] <- asinh(df[[response_var]])
df <- df %>% filter(!is.na(.data[[response_var]]))
formula <- as.formula(paste(response_var, "~ deposition + (1 | stream)"))
model <- lmer(formula, data = df)
# Model diagnostics
message("\nModel diagnostics for: ", response_var)
print(performance::check_model(model))  # <- Plots in Viewer
# Extract fixed effects
fixed_effects <- summary(model)$coefficients
fixed_effects_df <- as.data.frame(fixed_effects[, c("Estimate", "Std. Error", "df", "t value", "Pr(>|t|)")])
fixed_effects_df$Effect_Type <- ifelse(grepl("(Intercept)", rownames(fixed_effects_df)), "Intercept", "Effect Size")
fixed_effects_df$Variable <- response_var
fixed_effects_df <- fixed_effects_df[, c("Variable", "Effect_Type", "Estimate", "Std. Error", "df", "t value", "Pr(>|t|)")]
colnames(fixed_effects_df) <- c("Variable", "Effect_Type", "Estimate", "Std. Error", "df", "t value", "P")
return(fixed_effects_df)
}
# GPP: log10 transform
fixed_effects_GPP <- run_lmer_model("gpp_g_m2_d", df_filtered, log_transform = TRUE)
# Extract residuals
residuals_GPP <- residuals(fixed_effects_GPP)
# Create a grouping factor (e.g., stream name or any fixed effect you want to check variance homogeneity across)
# Replace 'stream_name' with the actual grouping variable used in your model
grouping_var <- df_filtered$stream_name
# Apply Levene’s Test
leveneTest(residuals_GPP ~ grouping_var)
# Apply Levene’s Test
car::leveneTest(residuals_GPP ~ grouping_var)
install.packages("car")
# Apply Levene’s Test
car::leveneTest(residuals_GPP ~ grouping_var)
# ---- Load and Clean Data ----
df <- read.csv("./data/metabolism_data.csv")
# Remove RT stream (rows 23:25) due to biased estimates
df_filtered <- df[-c(23:25), ]
# For log10-transformed response (e.g., GPP, ER, P:R)
run_lmer_model <- function(response_var, df, log_transform = FALSE) {
if (log_transform) {
df[[response_var]] <- log10(df[[response_var]])
}
df <- df %>% filter(!is.na(.data[[response_var]]))
formula <- as.formula(paste(response_var, "~ deposition + (1 | stream)"))
model <- lmer(formula, data = df)
# Model diagnostics
message("\nModel diagnostics for: ", response_var)
print(performance::check_model(model))  # <- Plots in Viewer
# Extract fixed effects
fixed_effects <- summary(model)$coefficients
fixed_effects_df <- as.data.frame(fixed_effects[, c("Estimate", "Std. Error", "df", "t value", "Pr(>|t|)")])
fixed_effects_df$Effect_Type <- ifelse(grepl("(Intercept)", rownames(fixed_effects_df)), "Intercept", "Effect Size")
fixed_effects_df$Variable <- response_var
fixed_effects_df <- fixed_effects_df[, c("Variable", "Effect_Type", "Estimate", "Std. Error", "df", "t value", "Pr(>|t|)")]
colnames(fixed_effects_df) <- c("Variable", "Effect_Type", "Estimate", "Std. Error", "df", "t value", "P")
return(fixed_effects_df)
}
# For asinh-transformed response (e.g., NEP)
run_lmer_model_asinh <- function(response_var, df) {
df[[response_var]] <- asinh(df[[response_var]])
df <- df %>% filter(!is.na(.data[[response_var]]))
formula <- as.formula(paste(response_var, "~ deposition + (1 | stream)"))
model <- lmer(formula, data = df)
# Model diagnostics
message("\nModel diagnostics for: ", response_var)
print(performance::check_model(model))  # <- Plots in Viewer
# Extract fixed effects
fixed_effects <- summary(model)$coefficients
fixed_effects_df <- as.data.frame(fixed_effects[, c("Estimate", "Std. Error", "df", "t value", "Pr(>|t|)")])
fixed_effects_df$Effect_Type <- ifelse(grepl("(Intercept)", rownames(fixed_effects_df)), "Intercept", "Effect Size")
fixed_effects_df$Variable <- response_var
fixed_effects_df <- fixed_effects_df[, c("Variable", "Effect_Type", "Estimate", "Std. Error", "df", "t value", "Pr(>|t|)")]
colnames(fixed_effects_df) <- c("Variable", "Effect_Type", "Estimate", "Std. Error", "df", "t value", "P")
return(fixed_effects_df)
}
# GPP: log10 transform
fixed_effects_GPP <- run_lmer_model("gpp_g_m2_d", df_filtered, log_transform = TRUE)
# ER: log10 transform
fixed_effects_ER <- run_lmer_model("er_g_m2_d", df_filtered, log_transform = TRUE)
# NEP: asinh transform
fixed_effects_NEP <- run_lmer_model_asinh("nep_g_m2_d", df_filtered)
# P:R ratio: log10 transform (optional)
fixed_effects_PR <- run_lmer_model("pr_mean", df_filtered, log_transform = TRUE)
# ---- Combine and Export Results ----
combined_results <- bind_rows(fixed_effects_GPP, fixed_effects_ER, fixed_effects_NEP, fixed_effects_PR)
write.xlsx(combined_results,
file = "./results/StreamMetabolism_LinearMixedEffect_output.xlsx",
rowNames = FALSE)
message("Fixed effects exported to: ./results/StreamMetabolism_LinearMixedEffect_output.xlsx")
# ---- Plotting Functions ----
plot_metab_box <- function(data, y_var, y_lab, title_label, y_scale = "log10", limits = NULL, breaks = waiver()) {
ggplot(data, aes(x = deposition, y = .data[[y_var]], color = deposition, fill = deposition)) +
geom_boxplot(width = 0.35, linewidth = 1, outlier.shape = NA, alpha = 0.7) +
geom_jitter(aes(stroke = 1.3), alpha = 0.5, size = 3, position = position_dodge2(0.1)) +
stat_summary(fun = mean, geom = "point", color = "black", size = 3, shape = 18,
position = position_dodge(width = 0.45)) +
scale_color_manual(values = c("Active" = "#0072B2", "Non-active" = "#CC79A7")) +
scale_fill_manual(values = c("Active" = "#0072B2", "Non-active" = "#CC79A7")) +
{if (y_scale == "log10") scale_y_log10(name = y_lab) else scale_y_continuous(name = y_lab, trans = y_scale, limits = limits, breaks = breaks)} +
labs(title = title_label, x = "Deposition") +
theme_cowplot(font_size = 20, line_size = 0.5) +
panel_border(color = "black", size = 1) +
theme(legend.position = "none",
strip.background = element_blank(),
strip.text = element_text(size = 14))
}
# ---- Generate Individual Plots ----
gpp_plot <- plot_metab_box(df, "gpp_g_m2_d",
expression(Gross~primary~production~(g~O[2]~m^{-2}~d^{-1})), "a")
plot_metab_box
# ---- Combine and Save Plots ----
combined_metab_plot <- grid.arrange(gpp_plot, er_plot, nep_plot, pr_plot, ncol = 2)
combined_metab_plot
pr_plot <- ggplot(df, aes(x = deposition, y = pr_mean, color = deposition, fill = deposition)) +
geom_hline(yintercept = 1, linewidth = 1, linetype = "longdash") +
geom_boxplot(width = 0.35, linewidth = 1, outlier.shape = NA, alpha = 0.7) +
geom_jitter(aes(stroke = 1.3), alpha = 0.5, size = 3, position = position_dodge2(0.1)) +
stat_summary(fun = mean, geom = "point", color = "black", size = 3, shape = 18,
position = position_dodge(width = 0.45)) +
scale_color_manual(values = c("Active" = "#0072B2", "Non-active" = "#CC79A7")) +
scale_fill_manual(values = c("Active" = "#0072B2", "Non-active" = "#CC79A7")) +
labs(title = "d", x = "Deposition", y = "P:R ratio") +
theme_cowplot(font_size = 20, line_size = 0.5) +
panel_border(color = "black", size = 1) +
theme(legend.position = "none",
strip.background = element_blank(),
strip.text = element_text(size = 14))
# ---- Combine and Save Plots ----
combined_metab_plot <- grid.arrange(gpp_plot, er_plot, nep_plot, pr_plot, ncol = 2)
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
# ---- Load and Clean Data ----
df <- read.csv("./data/metabolism_data.csv")
# Remove RT stream (rows 23:25) due to biased estimates
df_filtered <- df[-c(23:25), ]
# For log10-transformed response (e.g., GPP, ER, P:R)
run_lmer_model <- function(response_var, df, log_transform = FALSE) {
if (log_transform) {
df[[response_var]] <- log10(df[[response_var]])
}
df <- df %>% filter(!is.na(.data[[response_var]]))
formula <- as.formula(paste(response_var, "~ deposition + (1 | stream)"))
model <- lmer(formula, data = df)
# Model diagnostics
message("\nModel diagnostics for: ", response_var)
print(performance::check_model(model))  # <- Plots in Viewer
# Extract fixed effects
fixed_effects <- summary(model)$coefficients
fixed_effects_df <- as.data.frame(fixed_effects[, c("Estimate", "Std. Error", "df", "t value", "Pr(>|t|)")])
fixed_effects_df$Effect_Type <- ifelse(grepl("(Intercept)", rownames(fixed_effects_df)), "Intercept", "Effect Size")
fixed_effects_df$Variable <- response_var
fixed_effects_df <- fixed_effects_df[, c("Variable", "Effect_Type", "Estimate", "Std. Error", "df", "t value", "Pr(>|t|)")]
colnames(fixed_effects_df) <- c("Variable", "Effect_Type", "Estimate", "Std. Error", "df", "t value", "P")
return(fixed_effects_df)
}
# For asinh-transformed response (e.g., NEP)
run_lmer_model_asinh <- function(response_var, df) {
df[[response_var]] <- asinh(df[[response_var]])
df <- df %>% filter(!is.na(.data[[response_var]]))
formula <- as.formula(paste(response_var, "~ deposition + (1 | stream)"))
model <- lmer(formula, data = df)
# Model diagnostics
message("\nModel diagnostics for: ", response_var)
print(performance::check_model(model))  # <- Plots in Viewer
# Extract fixed effects
fixed_effects <- summary(model)$coefficients
fixed_effects_df <- as.data.frame(fixed_effects[, c("Estimate", "Std. Error", "df", "t value", "Pr(>|t|)")])
fixed_effects_df$Effect_Type <- ifelse(grepl("(Intercept)", rownames(fixed_effects_df)), "Intercept", "Effect Size")
fixed_effects_df$Variable <- response_var
fixed_effects_df <- fixed_effects_df[, c("Variable", "Effect_Type", "Estimate", "Std. Error", "df", "t value", "Pr(>|t|)")]
colnames(fixed_effects_df) <- c("Variable", "Effect_Type", "Estimate", "Std. Error", "df", "t value", "P")
return(fixed_effects_df)
}
# GPP: log10 transform
fixed_effects_GPP <- run_lmer_model("gpp_g_m2_d", df_filtered, log_transform = TRUE)
# ER: log10 transform
fixed_effects_ER <- run_lmer_model("er_g_m2_d", df_filtered, log_transform = TRUE)
# NEP: asinh transform
fixed_effects_NEP <- run_lmer_model_asinh("nep_g_m2_d", df_filtered)
# P:R ratio: log10 transform (optional)
fixed_effects_PR <- run_lmer_model("pr_mean", df_filtered, log_transform = TRUE)
# ---- Combine and Export Results ----
combined_results <- bind_rows(fixed_effects_GPP, fixed_effects_ER, fixed_effects_NEP, fixed_effects_PR)
write.xlsx(combined_results,
file = "./results/StreamMetabolism_LinearMixedEffect_output.xlsx",
rowNames = FALSE)
message("Fixed effects exported to: ./results/StreamMetabolism_LinearMixedEffect_output.xlsx")
# ---- Plotting Functions ----
plot_metab_box <- function(data, y_var, y_lab, title_label, y_scale = "log10", limits = NULL, breaks = waiver()) {
ggplot(data, aes(x = deposition, y = .data[[y_var]], color = deposition, fill = deposition)) +
geom_boxplot(width = 0.35, linewidth = 1, outlier.shape = NA, alpha = 0.7) +
geom_jitter(aes(stroke = 1.3), alpha = 0.5, size = 3, position = position_dodge2(0.1)) +
stat_summary(fun = mean, geom = "point", color = "black", size = 3, shape = 18,
position = position_dodge(width = 0.45)) +
scale_color_manual(values = c("Active" = "#0072B2", "Non-active" = "#CC79A7")) +
scale_fill_manual(values = c("Active" = "#0072B2", "Non-active" = "#CC79A7")) +
{if (y_scale == "log10") scale_y_log10(name = y_lab) else scale_y_continuous(name = y_lab, trans = y_scale, limits = limits, breaks = breaks)} +
labs(title = title_label, x = "Deposition") +
theme_cowplot(font_size = 20, line_size = 0.5) +
panel_border(color = "black", size = 1) +
theme(legend.position = "none",
strip.background = element_blank(),
strip.text = element_text(size = 14))
}
# ---- Generate Individual Plots ----
gpp_plot <- plot_metab_box(df, "gpp_g_m2_d",
expression(Gross~primary~production~(g~O[2]~m^{-2}~d^{-1})), "a")
er_plot <- plot_metab_box(df, "er_g_m2_d",
expression("|"~Ecosystem~respiration~"|"~(g~O[2]~m^{-2}~d^{-1})), "b")
nep_plot <- plot_metab_box(df, "nep_g_m2_d",
expression(Net~ecosystem~production~(g~O[2]~m^{-2}~d^{-1})),
"c", y_scale = "asinh", limits = c(-150, 0), breaks = c(-150, -50, -10, 0))
pr_plot <- ggplot(df, aes(x = deposition, y = pr_mean, color = deposition, fill = deposition)) +
geom_hline(yintercept = 1, linewidth = 1, linetype = "longdash") +
geom_boxplot(width = 0.35, linewidth = 1, outlier.shape = NA, alpha = 0.7) +
geom_jitter(aes(stroke = 1.3), alpha = 0.5, size = 3, position = position_dodge2(0.1)) +
stat_summary(fun = mean, geom = "point", color = "black", size = 3, shape = 18,
position = position_dodge(width = 0.45)) +
scale_color_manual(values = c("Active" = "#0072B2", "Non-active" = "#CC79A7")) +
scale_fill_manual(values = c("Active" = "#0072B2", "Non-active" = "#CC79A7")) +
labs(title = "d", x = "Deposition", y = "P:R ratio") +
theme_cowplot(font_size = 20, line_size = 0.5) +
panel_border(color = "black", size = 1) +
theme(legend.position = "none",
strip.background = element_blank(),
strip.text = element_text(size = 14))
# ---- Combine and Save Plots ----
combined_metab_plot <- grid.arrange(gpp_plot, er_plot, nep_plot, pr_plot, ncol = 2)
combined_metab_plot
message("✔ All models run, diagnostics shown, and plots saved.")
# ---- Load Required Packages ----
library(dplyr)
library(ggplot2)
library(cowplot)
library(patchwork)
# ---- Load Data ----
df <- read.csv("./data/metabolism_data.csv")
# ---- Filter Data by Deposition Type ----
meta_active <- df %>% filter(deposition == "Active")
meta_nonactive <- df %>% filter(deposition == "Non-active")
# ---- Plot: Active Deposition Streams ----
Met_active <- ggplot(meta_active, aes(x = gpp_g_m2_d, y = er_g_m2_d,
color = deposition, fill = deposition)) +
geom_abline(slope = 1, linetype = "dashed", color = "black", linewidth = 0.7) +
geom_abline(slope = 3.3, intercept = 7.62, color = "#0072B2", linewidth = 1) +
geom_point(aes(shape = stream), size = 4, stroke = 1.5, alpha = 0.7) +
scale_shape_manual(values = c(21, 22, 23, 24)) +
scale_color_manual(values = c("Active" = "#0072B2", "Non-active" = "#CC79A7"),
aesthetics = c("colour", "fill")) +
scale_x_continuous(
name = expression(Gross~primary~production~(g~O[2]~m^{-2}~d^{-1})),
limits = c(0, 55)) +
scale_y_continuous(
name = expression("|"~Ecosystem~respiration~"|"~(g~O[2]~m^{-2}~d^{-1})),
limits = c(0, 55)) +
labs(title = "a", fill = "Deposition", color = "Deposition") +
theme_cowplot(font_size = 20, line_size = 0.5) +
panel_border(color = "black", size = 1) +
annotate("text", x = 32, y = 53,
label = "y == 7.62 + 3.31 * x ~~ R^2 == 0.84",
parse = TRUE, color = "#0072B2", size = 6)
# ---- Plot: Non-active Deposition Streams ----
Met_nonactive <- ggplot(meta_nonactive, aes(x = gpp_g_m2_d, y = er_g_m2_d,
shape = stream, color = deposition, fill = deposition)) +
geom_abline(slope = 1, linetype = "dashed", color = "black", linewidth = 0.7) +
geom_point(size = 4, stroke = 1.5, alpha = 0.7) +
scale_shape_manual(values = c(6, 8, 9)) +
scale_color_manual(values = c("Non-active" = "#CC79A7"),
aesthetics = c("colour", "fill")) +
scale_x_continuous(
name = expression(Gross~primary~production~(g~O[2]~m^{-2}~d^{-1})),
limits = c(0, 55)) +
scale_y_continuous(
name = expression("|"~Ecosystem~respiration~"|"~(g~O[2]~m^{-2}~d^{-1})),
limits = c(0, 200)) +
labs(title = "b", fill = "Deposition", color = "Deposition", shape = "Stream") +
theme_cowplot(font_size = 20, line_size = 0.5) +
panel_border(color = "black", size = 1)
# ---- Combine Plots ----
Met_combined <- Met_active + Met_nonactive + plot_layout(ncol = 2)
Met_combined
# ---- Plot: Non-active Deposition Streams ----
Met_nonactive <- ggplot(meta_nonactive, aes(x = gpp_g_m2_d, y = er_g_m2_d,
shape = stream, color = deposition, fill = deposition)) +
geom_abline(slope = 1, linetype = "dashed", color = "black", linewidth = 0.7) +
geom_point(size = 4, stroke = 1.5, alpha = 0.7) +
scale_shape_manual(values = c(6, 8, 9)) +
scale_color_manual(values = c("Non-active" = "#CC79A7"),
aesthetics = c("colour", "fill")) +
scale_x_continuous(
name = expression(Gross~primary~production~(g~O[2]~m^{-2}~d^{-1})),
limits = c(0, 55)) +
scale_y_continuous(
name = expression("|"~Ecosystem~respiration~"|"~(g~O[2]~m^{-2}~d^{-1})),
limits = c(0, 200)) +
labs(title = "b", fill = "Deposition", color = "Deposition", shape = "Stream") +
theme_cowplot(font_size = 20, line_size = 0.5) +
panel_border(color = "black", size = 1)
# ---- Combine Plots ----
Met_combined <- Met_active + Met_nonactive + plot_layout(ncol = 2)
Met_combined
# ---- Save Figure ----
ggsave(plot = Met_combined,
filename = "./figs/Figure2.tiff",
width = 16, height = 6, dpi = 300)
message("Figure2.tiff saved to ./figs/")
# ---- Load Libraries ----
library(lme4)
library(lmerTest)
library(performance)
# ---- Load Data ----
hydro_df <- read.csv("./data/HydraulicData.csv")
View(hydro_df)
# Directory containing your files
folder <- "./data/"
# Get current filenames
files <- list.files(folder, full.names = TRUE)
files
# Define the folder path
folder <- "./data/"
# Get current filenames with full paths
files <- list.files(folder, full.names = TRUE)
# Define new, cleaned filenames (must be in the same order as the original `files`)
new_names <- c(
"alkalinity_calcium_coupling.csv",
"alkalinity.csv",
"calcium_stock_variation_linear_segments.csv",
"calcium_specific_conductivity_data.csv",
"calcium_mass_transfer_reactions.csv",
"geochemical_data.csv",
"high_frequency_data.csv",
"hydraulic_data.csv",
"metabolism_data.csv",
"probe_data_discrete_sampling.csv",
"stream_metabolism_travertine_formation.csv"
)
# Create full paths for the new filenames
new_paths <- file.path(folder, new_names)
# Perform the renaming
renamed <- file.rename(files, new_paths)
# Check which renaming operations succeeded
data.frame(
old_name = basename(files),
new_name = basename(new_paths),
success = renamed
)
# Set the path to your scripts (adjust if you use ./R or another folder)
script_folder <- "./R/"
# List all .R files recursively
r_files <- list.files(script_folder, pattern = "\\.R$", full.names = TRUE, recursive = TRUE)
# Mapping of old filenames to new filenames
old_new_names <- c(
"Alkalinity_Calcium_Coupling.csv"               = "alkalinity_calcium_coupling.csv",
"Alkalinity.csv"                                = "alkalinity.csv",
"Ca_Stock_Variation_LinearSegments.csv"         = "calcium_stock_variation_linear_segments.csv",
"Calcium_SpConduc_Data.csv"                     = "calcium_specific_conductivity_data.csv",
"CalciumMassTransferReactions.csv"              = "calcium_mass_transfer_reactions.csv",
"GeochemicalData.csv"                           = "geochemical_data.csv",
"HighFrequencyData.csv"                         = "high_frequency_data.csv",
"HydraulicData.csv"                             = "hydraulic_data.csv",
"metabolism_data.csv"                           = "metabolism_data.csv",
"ProbeData_DiscreteSampling.csv"                = "probe_data_discrete_sampling.csv",
"StreamMetabolism_TravertineFormation_Data.csv" = "stream_metabolism_travertine_formation.csv"
)
# Function to replace old names with new names in a file
replace_in_file <- function(file, replacements) {
content <- readLines(file)
for (old in names(replacements)) {
new <- replacements[[old]]
content <- gsub(old, new, content, fixed = TRUE)
}
writeLines(content, file)
}
# Apply the replacement to all R scripts
invisible(lapply(r_files, replace_in_file, replacements = old_new_names))
cat("✅ All script filenames have been updated.\n")
# ---- Load Data ----
hydro_df <- read.csv("./data/hydraulic_data.csv")
# ---- Fit Linear Mixed-Effects Models ----
vel_model <- lmer(log10(Water_velocity_ms) ~ Deposition + (1 | Stream), data = hydro_df)
q_model   <- lmer(log10(Discharge_Ls)       ~ Deposition + (1 | Stream), data = hydro_df)
z_model   <- lmer(log10(Stream_depth_m)     ~ Deposition + (1 | Stream), data = hydro_df)
# ---- Models Diagnostics  ----
message("\nRunning check_model diagnostics for all models...\n")
message("Water Velocity Model:")
check_model(vel_model)
message("Discharge Model:")
check_model(q_model)
message("Stream Depth Model:")
check_model(z_model)
# ---- Save Model Summaries to File ----
sink("./results/hydraulic_model_summaries.txt")
cat("=== Water Velocity Model ===\n\n")
print(summary(vel_model))
cat("\n\n=== Discharge Model ===\n\n")
print(summary(q_model))
cat("\n\n=== Stream Depth Model ===\n\n")
print(summary(z_model))
sink()
