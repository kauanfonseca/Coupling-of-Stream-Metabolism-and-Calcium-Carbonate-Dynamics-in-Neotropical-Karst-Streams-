HighFrequencyData <- read.csv("./data/HighFrequencyData.csv")  # Adjust filename as needed
summary(HighFrequencyData)
# Parse datetime column
HighFrequencyData$sampling_datetime <- ymd_hms(HighFrequencyData$sampling_datetime)
# ---- Load Required Libraries ----
library(dplyr)
library(lubridate)
library(ggplot2)
# ---- Load High-Frequency Data ----
HighFrequencyData <- read.csv("./data/HighFrequencyData.csv")
# ---- Parse Datetime Column ----
HighFrequencyData$sampling_datetime <- as.POSIXct(
HighFrequencyData$sampling_datetime, format = "%Y%m%d %H:%M:%S"
)
# ---- List of Variables to Plot ----
vars_to_plot <- c(
"par_umol_m2_s", "temp_c", "specific_cond_uS_cm",
"dissolved_oxygen_mgL", "dissolved_oxygen_percent", "calcium_mgL"
)
# ---- Plot Variables Over Time ----
for (var in vars_to_plot) {
p <- ggplot(HighFrequencyData, aes(x = sampling_datetime, y = .data[[var]])) +
geom_line(color = "steelblue") +
facet_wrap(~ stream_abreviation, scales = "free_y", ncol = 1) +
labs(
title = paste("Time Series of", var),
x = "Sampling Datetime",
y = var
) +
theme_minimal() +
theme(
strip.text = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5)
)
print(p)
}
# ---- Plot Variables Over Time ----
for (var in vars_to_plot) {
p <- ggplot(HighFrequencyData, aes(x = sampling_datetime, y = .data[[var]])) +
geom_line(color = "steelblue") +
facet_wrap(~ stream_abreviation, scales = "free_y", ncol = 1) +
labs(
title = paste("Time Series of", var),
x = "Sampling Datetime",
y = var
) +
theme_minimal() +
theme(
strip.text = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5)
)
print(p)
}
ggplot(HighFrequencyData, aes(x = sampling_datetime, y = .data[[var]])) +
geom_line(color = "steelblue") +
facet_wrap(~ stream_abreviation, scales = "free_y", ncol = 1) +
labs(
title = paste("Time Series of", var),
x = "Sampling Datetime",
y = var
) +
theme_minimal() +
theme(
strip.text = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5)
)
# ---- Load Data ----
HighFrequencyData <- read.csv("./data/HighFrequencyData.csv")
# ---- Parse DateTime Safely ----
HighFrequencyData$sampling_datetime <- as.POSIXct(
HighFrequencyData$sampling_datetime, format = "%Y%m%d %H:%M:%S"
)
# ---- Check Parsing Worked ----
if (!inherits(HighFrequencyData$sampling_datetime, "POSIXct")) {
stop("Datetime parsing failed.")
}
# ---- Variables to Plot ----
vars_to_plot <- c(
"par_umol_m2_s", "temp_c", "specific_cond_uS_cm",
"dissolved_oxygen_mgL", "dissolved_oxygen_percent", "calcium_mgL"
)
# ---- Check Variables Have Data ----
non_na_counts <- sapply(HighFrequencyData[vars_to_plot], function(x) sum(!is.na(x)))
print(non_na_counts)
# ---- Plot Variables Over Time ----
for (var in vars_to_plot) {
if (non_na_counts[var] > 0) {
p <- ggplot(HighFrequencyData, aes(x = sampling_datetime, y = .data[[var]])) +
geom_line(color = "steelblue", linewidth = 0.4, na.rm = TRUE) +
facet_wrap(~ stream_abreviation, scales = "free_y", ncol = 1) +
labs(
title = paste("Time Series of", var),
x = "Sampling Datetime",
y = var
) +
theme_minimal() +
theme(
strip.text = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5)
)
print(p)
} else {
message("Skipping ", var, " — No non-NA values.")
}
}
# Extract Date and Time from sampling_datetime
BASE_input <- HighFrequencyData %>%
group_by(stream_name, stream_abreviation) %>%
mutate(
Date = as.Date(sampling_datetime),                       # Extract date
Time = format(sampling_datetime, "%H:%M:%S"),            # Extract time
I = par_umol_m2_s,                                       # PAR
tempC = temp_c,                                          # Temp
DO.meas = dissolved_oxygen_mgL,                          # Dissolved O2
atmo.pressure = 1,                                       # Atmospheric Pressure
salinity = 0                                             # Salinity
)
# ---- Load High-Frequency Data ----
HighFrequencyData <- read.csv("./data/HighFrequencyData.csv")  # Adjust filename as needed
summary(HighFrequencyData)
# Parse datetime column
HighFrequencyData$sampling_datetime <- ymd_hms(HighFrequencyData$sampling_datetime)
ggplot(HighFrequencyData, aes(x=sampling_datetime, y))
# Extract Date and Time from sampling_datetime
BASE_input <- HighFrequencyData %>%
group_by(stream_name, stream_abreviation) %>%
mutate(
Date = as.Date(sampling_datetime),                       # Extract date
Time = format(sampling_datetime, "%H:%M:%S"),            # Extract time
I = par_umol_m2_s,                                       # PAR
tempC = temp_c,                                          # Temp
DO.meas = dissolved_oxygen_mgL,                          # Dissolved O2
atmo.pressure = 1,                                       # Atmospheric Pressure
salinity = 0                                             # Salinity
) %>%
select(Date, Time, I, tempC, DO.meas, atmo.pressure, salinity)
ggplot(BASE_input, aes(x=sampling_datetime, y=DO.meas)) +
geom_line() + geom_point() +
facet_grid(stream_abreviation)
View(BASE_input)
View(BASE_input)
ggplot(BASE_input, aes(x=sampling_datetime, y=DO.meas)) +
geom_line() + geom_point() +
facet_grid(stream_name)
ggplot(BASE_input, aes(x=sampling_datetime, y=DO.meas)) +
geom_line() + geom_point() +
facet_wrap(stream_name~)
ggplot(BASE_input, aes(x=sampling_datetime, y=DO.meas)) +
geom_line() + geom_point() +
facet_wrap(stream_name~)
library(ggplot2)
ggplot(BASE_input, aes(x=sampling_datetime, y=DO.meas)) +
geom_line() + geom_point() +
facet_wrap(~stream_name)
library(ggplot2)
ggplot(BASE_input, aes(x=sampling_datetime, y=DO.meas)) +
geom_line() + geom_point() +
facet_wrap(~stream_name)
library(dplyr)
library(ggplot2)
library(lubridate)
BASE_input <- BASE_input %>%
mutate(
datetime = as.POSIXct(paste(Date, Time), format = "%Y-%m-%d %H:%M:%S")
)
ggplot(BASE_input, aes(x = datetime, y = DO.meas)) +
geom_line() +
geom_point(size = 0.5) +
facet_wrap(~ stream_name, scales = "free_y") +
labs(
title = "Dissolved Oxygen Over Time",
x = "Datetime",
y = "Dissolved Oxygen (mg/L)"
) +
theme_minimal()
,
ggplot(BASE_input, aes(x = datetime, y = DO.meas)) +
geom_line() +
geom_point(size = 0.5) +
facet_wrap(~ stream_name, scales = "free_y")  +
theme_minimal()
ggplot(BASE_input, aes(x = datetime, y = DO.meas)) +
geom_line() +
geom_point(size = 0.5) +
facet_wrap(~ stream_name, scales = "free_y")  +
theme_minimal()
ggplot(BASE_input, aes(x = datetime, y = DO.meas)) +
geom_line() +
geom_point(size = 0.5) +
facet_wrap(~ stream_name, scales = "free")  +
theme_minimal()
ggplot(BASE_input, aes(x = datetime, y = DO.meas)) +
geom_line() +
geom_point(size = 0.5) +
facet_wrap(~ stream_abreviation, scales = "free")  +
theme_minimal()
ggplot(BASE_input, aes(x = datetime, y = tempC)) +
geom_line() +
geom_point(size = 0.5) +
facet_wrap(~ stream_abreviation, scales = "free")  +
theme_minimal()
ggplot(BASE_input, aes(x = datetime, y = I)) +
geom_line() +
geom_point(size = 0.5) +
facet_wrap(~ stream_abreviation, scales = "free")  +
theme_minimal()
# ---- Load High-Frequency Data ----
HighFrequencyData <- read.csv("./data/HighFrequencyData.csv")  # Adjust filename as needed
summary(HighFrequencyData)
# Parse datetime column
HighFrequencyData$sampling_datetime <- ymd_hms(HighFrequencyData$sampling_datetime)
# Extract Date and Time from sampling_datetime
BASE_input <- HighFrequencyData %>%
group_by(stream_name, stream_abreviation) %>%
mutate(
Date = as.Date(sampling_datetime),                       # Extract date
Time = format(sampling_datetime, "%H:%M:%S"),            # Extract time
I = par_umol_m2_s,                                       # PAR
tempC = temp_c,                                          # Temp
DO.meas = dissolved_oxygen_mgL,                          # Dissolved O2
atmo.pressure = 1,                                       # Atmospheric Pressure
salinity = 0                                             # Salinity
) %>%
select(Date, Time, I, tempC, DO.meas, atmo.pressure, salinity)
# ---- Check Data Preview ----
head(BASE_input)
summary(BASE_input)
if (dir.exists(results.dir)){} else {
dir.create(results.dir)}
# ---- Save Final Prepared Data ----
write.csv(BASE_input, "./incremental/BASE_input.csv", row.names = FALSE)
data.dir <- "./incremental/BASE_input"
#set output directory to Output folder in current working directory.
results.dir <- file.path(getwd(), "./results/StreamMetabolism")
if (dir.exists(results.dir)){} else {
dir.create(results.dir)}
#run model.
results <- bayesmetab(data.dir, results.dir, interval = 600)
View(results)
# ---- Load Required Libraries ----
library(dplyr)
library(lubridate)
library(R2jags)
library(BASEmetab)
# ---- Load High-Frequency Data ----
HighFrequencyData <- read.csv("./data/HighFrequencyData.csv")
# ---- Parse Datetime Column ----
HighFrequencyData$sampling_datetime <- as.POSIXct(
HighFrequencyData$sampling_datetime, format = "%Y%m%d %H:%M:%S"
)
# ---- Remove Rows with Missing Temperature or DO ----
HighFrequencyData <- HighFrequencyData %>%
filter(!is.na(temp_c) & !is.na(dissolved_oxygen_mgL))
# ---- Split, Prepare, and Save Data by Stream ----
streams <- HighFrequencyData %>%
distinct(stream_name, stream_abreviation)
for (i in 1:nrow(streams)) {
# Filter for current stream
stream_data <- HighFrequencyData %>%
filter(stream_name == streams$stream_name[i])
# Prepare and clean data (remove unnecessary columns before saving)
BASE_input <- stream_data %>%
mutate(
Date = as.Date(sampling_datetime),
Time = format(sampling_datetime, "%H:%M:%S"),
I = par_umol_m2_s,
tempC = temp_c,
DO.meas = dissolved_oxygen_mgL,
atmo.pressure = 1,
salinity = 0
) %>%
select(Date, Time, I, tempC, DO.meas, atmo.pressure, salinity)  # Remove stream info columns here
# Save dataset for current stream (no stream name/abbreviation in file)
file_name <- paste0("./incremental/BASE_input_", streams$stream_abreviation[i], ".csv")
write.csv(BASE_input, file_name, row.names = FALSE)
# Set output directory for current stream
results_dir <- file.path(getwd(), "results", "StreamMetabolism", streams$stream_abreviation[i])
if (!dir.exists(results_dir)) dir.create(results_dir, recursive = TRUE)
# Run metabolism model for current stream
message("Running bayesmetab model for stream: ", streams$stream_abreviation[i])
results <- bayesmetab(data.dir = file_name, results.dir = results_dir, interval = 600)
}
for (i in 1:nrow(streams)) {
# Filter for current stream
stream_data <- HighFrequencyData %>%
filter(stream_name == streams$stream_name[i])
# Prepare and clean data (remove unnecessary columns before saving)
BASE_input <- stream_data %>%
mutate(
Date = as.Date(sampling_datetime),
Time = format(sampling_datetime, "%H:%M:%S"),
I = par_umol_m2_s,
tempC = temp_c,
DO.meas = dissolved_oxygen_mgL,
atmo.pressure = 1,
salinity = 0
) %>%
select(Date, Time, I, tempC, DO.meas, atmo.pressure, salinity)  # Remove stream info columns here
# Save dataset for current stream (no stream name/abbreviation in file)
file_name <- paste0("./incremental/BASE_input_", streams$stream_abreviation[i], ".csv")
write.csv(BASE_input, file_name, row.names = FALSE)
# Set output directory for current stream
results_dir <- file.path(getwd(), "results", "StreamMetabolism")
if (!dir.exists(results_dir)) dir.create(results_dir, recursive = TRUE)
# Run metabolism model for current stream
message("Running bayesmetab model for stream: ", streams$stream_abreviation[i])
results <- bayesmetab(data.dir = file_name, results.dir = results_dir, interval = 600)
}
data.dir <- "./incremental/BASE_input"
#set output directory to Output folder in current working directory.
results.dir <- file.path(getwd(), "./results/BASEmeta_output")
if (dir.exists(results.dir)){} else {
dir.create(results.dir)}
#run model.
results <- bayesmetab(data.dir, results.dir, interval = 600)
View(HighFrequencyData)
View(HighFrequencyData)
View(HighFrequencyData)
View(HighFrequencyData)
View(HighFrequencyData)
library(readr)
BASE_input_CD <- read_csv("incremental/BASE_input_CD.csv")
View(BASE_input_CD)
source("~/.active-rstudio-document")
# ---- Load High-Frequency Data ----
HighFrequencyData <- read.csv("./data/HighFrequencyData.csv")
# ---- Load High-Frequency Data ----
HighFrequencyData <- read.csv("./data/HighFrequencyData.csv")
# ---- Parse Datetime Column ----
HighFrequencyData$sampling_datetime <- as.POSIXct(
HighFrequencyData$sampling_datetime, format = "%Y%m%d %H:%M:%S"
)
# ---- Set Output Paths ----
output_data_dir <- file.path(getwd(), "incremental", "Metabolism_Modelling", "BASE_input_coded")
results_dir      <- file.path(getwd(), "incremental", "Metabolism_Modelling", "BASEmetab_output")
# Create folders if they don’t exist
dir.create(output_data_dir, recursive = TRUE, showWarnings = FALSE)
dir.create(results_dir, recursive = TRUE, showWarnings = FALSE)
# ---- Step 1: Format and Save Input Data Files Per Stream ----
streams <- HighFrequencyData %>%
distinct(stream_name, stream_abreviation)
message("Creating BASE_input files per stream...")
for (i in 1:nrow(streams)) {
stream_data <- HighFrequencyData %>%
filter(stream_name == streams$stream_name[i]) %>%
mutate(
Date = as.Date(sampling_datetime),
Time = format(sampling_datetime, "%H:%M:%S"),
I = par_umol_m2_s,
tempC = temp_c,
DO.meas = dissolved_oxygen_mgL,
atmo.pressure = 1,
salinity = 0
) %>%
select(Date, Time, I, tempC, DO.meas, atmo.pressure, salinity)
file_name <- paste0("BASE_input_", streams$stream_abreviation[i], ".csv")
write.csv(stream_data, file.path(output_data_dir, file_name), row.names = FALSE)
message("Saved input file for: ", streams$stream_abreviation[i])
}
# ---- Step 2: Run BASEmetab Models ----
input_files <- list.files(output_data_dir, pattern = "^BASE_input_.*\\.csv$", full.names = TRUE)
message("\nRunning BASEmetab models for each stream...\n")
for (file_path in input_files) {
stream_label <- tools::file_path_sans_ext(basename(file_path))
temp_input_dir <- file.path(tempdir(), paste0("metab_run_", stream_label))
dir.create(temp_input_dir, recursive = TRUE, showWarnings = FALSE)
file.copy(from = file_path,
to = file.path(temp_input_dir, "BASE_input.csv"),
overwrite = TRUE)
message("Running model for stream: ", stream_label)
tryCatch({
bayesmetab(data.dir = temp_input_dir, results.dir = results_dir, interval = 600)
}, error = function(e) {
message("Model failed for stream ", stream_label, ": ", e$message)
})
}
message("\nAll model runs completed.")
# ---- Load High-Frequency Data ----
HighFrequencyData <- read.csv("./data/HighFrequencyData.csv")
# ---- Parse Datetime Column ----
HighFrequencyData$sampling_datetime <- as.POSIXct(
HighFrequencyData$sampling_datetime, format = "%Y%m%d %H:%M:%S"
)
# ---- Set Output Paths ----
output_data_dir <- file.path(getwd(), "incremental", "Metabolism_Modelling", "BASE_input_coded")
results_dir      <- file.path(getwd(), "incremental", "Metabolism_Modelling", "BASEmetab_output")
# Create folders if they don’t exist
dir.create(output_data_dir, recursive = TRUE, showWarnings = FALSE)
dir.create(results_dir, recursive = TRUE, showWarnings = FALSE)
# ---- Step 1: Format and Save Input Data Files Per Stream ----
streams <- HighFrequencyData %>%
distinct(stream_name, stream_abreviation)
message("Creating BASE_input files per stream...")
for (i in 1:nrow(streams)) {
stream_data <- HighFrequencyData %>%
filter(stream_name == streams$stream_name[i]) %>%
mutate(
Date = as.Date(sampling_datetime),
Time = format(sampling_datetime, "%H:%M:%S"),
I = par_umol_m2_s,
tempC = temp_c,
DO.meas = dissolved_oxygen_mgL,
atmo.pressure = 1,
salinity = 0
) %>%
select(Date, Time, I, tempC, DO.meas, atmo.pressure, salinity)
# ---- Remove rows with any NAs for RT and CC ----
abbrev <- streams$stream_abreviation[i]
if (abbrev %in% c("RT", "CC")) {
stream_data <- stream_data %>% filter(complete.cases(.))
}
# ---- Save cleaned input file ----
file_name <- paste0("BASE_input_", abbrev, ".csv")
write.csv(stream_data, file.path(output_data_dir, file_name), row.names = FALSE)
message("Saved input file for: ", abbrev)
}
# ---- Step 2: Run BASEmetab Models ----
input_files <- list.files(output_data_dir, pattern = "^BASE_input_.*\\.csv$", full.names = TRUE)
message("\nRunning BASEmetab models for each stream...\n")
for (file_path in input_files) {
stream_label <- tools::file_path_sans_ext(basename(file_path))
temp_input_dir <- file.path(tempdir(), paste0("metab_run_", stream_label))
dir.create(temp_input_dir, recursive = TRUE, showWarnings = FALSE)
file.copy(from = file_path,
to = file.path(temp_input_dir, "BASE_input.csv"),
overwrite = TRUE)
message("Running model for stream: ", stream_label)
tryCatch({
bayesmetab(data.dir = temp_input_dir, results.dir = results_dir, interval = 600)
}, error = function(e) {
message("Model failed for stream ", stream_label, ": ", e$message)
})
}
message("\nAll model runs completed.")
# ---- Load High-Frequency Data ----
HighFrequencyData <- read.csv("./data/HighFrequencyData.csv")
# ---- Parse Datetime Column ----
HighFrequencyData$sampling_datetime <- as.POSIXct(
HighFrequencyData$sampling_datetime, format = "%Y%m%d %H:%M:%S"
)
# ---- Set Output Paths ----
output_data_dir <- file.path(getwd(), "incremental", "Metabolism_Modelling", "BASE_input_coded")
results_base_dir <- file.path(getwd(), "incremental", "Metabolism_Modelling", "BASEmetab_output")
# Create folders if they don’t exist
dir.create(output_data_dir, recursive = TRUE, showWarnings = FALSE)
dir.create(results_base_dir, recursive = TRUE, showWarnings = FALSE)
# ---- Step 1: Format and Save Input Data Files Per Stream ----
streams <- HighFrequencyData %>%
distinct(stream_name, stream_abreviation)
message("Creating BASE_input files per stream...")
for (i in 1:nrow(streams)) {
abbrev <- streams$stream_abreviation[i]
stream_data <- HighFrequencyData %>%
filter(stream_name == streams$stream_name[i]) %>%
mutate(
Date = as.Date(sampling_datetime),
Time = format(sampling_datetime, "%H:%M:%S"),
I = par_umol_m2_s,
tempC = temp_c,
DO.meas = dissolved_oxygen_mgL,
atmo.pressure = 1,
salinity = 0
) %>%
select(Date, Time, I, tempC, DO.meas, atmo.pressure, salinity)
# ---- Remove rows with NA values (only for RT and CC) ----
if (abbrev %in% c("RT", "CC")) {
stream_data <- stream_data %>% filter(complete.cases(.))
}
# ---- Save Prepared Data File ----
file_name <- paste0("BASE_input_", abbrev, ".csv")
write.csv(stream_data, file.path(output_data_dir, file_name), row.names = FALSE)
message("Saved input file for: ", abbrev)
}
# ---- Step 2: Run BASEmetab Models and Save Per Stream ----
input_files <- list.files(output_data_dir, pattern = "^BASE_input_.*\\.csv$", full.names = TRUE)
message("\nRunning BASEmetab models for each stream...\n")
for (file_path in input_files) {
stream_label <- gsub("BASE_input_", "", tools::file_path_sans_ext(basename(file_path)))  # e.g., "CD"
# Create temp input folder with required 'BASE_input.csv' filename
temp_input_dir <- file.path(tempdir(), paste0("metab_run_", stream_label))
dir.create(temp_input_dir, recursive = TRUE, showWarnings = FALSE)
file.copy(from = file_path,
to = file.path(temp_input_dir, "BASE_input.csv"),
overwrite = TRUE)
# Set stream-specific output directory
stream_output_dir <- file.path(results_base_dir, stream_label)
dir.create(stream_output_dir, recursive = TRUE, showWarnings = FALSE)
# Run metabolism model
message("Running model for stream: ", stream_label)
tryCatch({
bayesmetab(data.dir = temp_input_dir, results.dir = stream_output_dir, interval = 600)
}, error = function(e) {
message("Model failed for stream ", stream_label, ": ", e$message)
})
}
message("\nAll model runs completed and saved to individual stream folders.")
# ---- Load or Install Required Packages ----
required_packages <- c("dplyr", "lubridate", "R2jags", "BASEmetab", "ggplot2", "readr", "tidyr")
for (pkg in required_packages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
library(pkg, character.only = TRUE)
}
message("\nAll model runs completed and saved to individual stream folders.")
# ---- Load High-Frequency Data ----
HighFrequencyData <- read.csv("./data/HighFrequencyData.csv")
# ---- Parse Datetime Column ----
HighFrequencyData$sampling_datetime <- as.POSIXct(
HighFrequencyData$sampling_datetime, format = "%Y%m%d %H:%M:%S"
)
source("~/Library/CloudStorage/OneDrive-Personal/UNL Desktop/Área de Trabalho/Kauan/Kauan/Doutorado/First chapter/Submisison/Coupling of Stream Metabolism and Calcium Carbonate Dynamics in Neotropical Karst Streams /R/Metabolism_Modelling.R")
