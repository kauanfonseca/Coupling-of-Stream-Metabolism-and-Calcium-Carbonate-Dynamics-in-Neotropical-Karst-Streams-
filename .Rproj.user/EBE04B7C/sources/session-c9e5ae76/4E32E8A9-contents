# ==============================================================================
# Script: Metabolism Data Preparation - Coupling of Stream Metabolism and Calcium Carbonate Dynamics
# Description: Prepares high-frequency data for stream metabolism analyses.
#              Cleans, splits, formats, and runs metabolism models for each stream.
# ==============================================================================

# ---- Load Required Libraries ----
library(dplyr)
library(lubridate)
library(R2jags)
library(BASEmetab)

# ---- Load High-Frequency Data ----
HighFrequencyData <- read.csv("./data/HighFrequencyData.csv")

# ---- Parse Datetime Column ----
HighFrequencyData$sampling_datetime <- as.POSIXct(
  HighFrequencyData$sampling_datetime, format = "%Y%m%d %H:%M:%S"
)

# ---- Remove Rows with Missing Temperature or DO ----
HighFrequencyData <- HighFrequencyData %>%
  filter(!is.na(temp_c) & !is.na(dissolved_oxygen_mgL))

# ---- Split, Prepare, and Save Data by Stream ----
streams <- HighFrequencyData %>%
  distinct(stream_name, stream_abreviation)

for (i in 1:nrow(streams)) {
  
  # Filter for current stream
  stream_data <- HighFrequencyData %>%
    filter(stream_name == streams$stream_name[i])
  
  # Prepare and clean data (remove unnecessary columns before saving)
  BASE_input <- stream_data %>%
    mutate(
      Date = as.Date(sampling_datetime),
      Time = format(sampling_datetime, "%H:%M:%S"),
      I = par_umol_m2_s,
      tempC = temp_c,
      DO.meas = dissolved_oxygen_mgL,
      atmo.pressure = 1,
      salinity = 0
    ) %>%
    select(Date, Time, I, tempC, DO.meas, atmo.pressure, salinity)  # Remove stream info columns here
  
  # Save dataset for current stream (no stream name/abbreviation in file)
  file_name <- paste0("./incremental/BASE_input_", streams$stream_abreviation[i], ".csv")
  write.csv(BASE_input, file_name, row.names = FALSE)
  
  # Set output directory for current stream
  results_dir <- file.path(getwd(), "results", "StreamMetabolism", streams$stream_abreviation[i])
  if (!dir.exists(results_dir)) dir.create(results_dir, recursive = TRUE)
  
  # Run metabolism model for current stream
  message("Running bayesmetab model for stream: ", streams$stream_abreviation[i])
  results <- bayesmetab(data.dir = file_name, results.dir = results_dir, interval = 600)
}


data.dir <- "./incremental/BASE_input" 

#set output directory to Output folder in current working directory.
results.dir <- file.path(getwd(), "./results/BASEmeta_output")

if (dir.exists(results.dir)){} else {
  dir.create(results.dir)}

#run model.
results <- bayesmetab(data.dir, results.dir, interval = 600)


# ---- End of Script ----